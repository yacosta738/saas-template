server:
  port: 8080
  # make sure requests the proxy uri instead of the server one
  forward-headers-strategy: native
logging:
  level:
    org.springframework.r2dbc: DEBUG
    org.springframework.security: DEBUG
    org.springframework.security.oauth2.client: DEBUG
    com.loomify: DEBUG
spring:
  devtools:
    restart:
      enabled: true
      additional-exclude: static/**
    livereload:
      enabled: true
  liquibase:
    contexts: dev
springdoc:
  show-actuator: true
application:
  name: Loomify
  description: Example Loomify application used for local development.
  version: 0.0.1-SNAPSHOT
  display-ribbon-on-profiles: dev
  security:
    oauth2:
      base-url: ${OAUTH2_SERVER_URL:http://localhost:9080}
      server-url: ${application.security.oauth2.base-url}
      issuer-uri: ${application.security.oauth2.base-url}/realms/${application.security.oauth2.realm}
      realm: ${REALM:Loomify}
      client-id: ${CLIENT_ID:web_app}
      client-secret: ${CLIENT_SECRET:web_app}
      admin-client-id: ${ADMIN_CLIENT_ID:admin-cli}
      admin-realm: ${ADMIN_REALM:master}
      admin-username: ${ADMIN_REALM_USERNAME:admin}
      admin-password: ${ADMIN_REALM_PASSWORD:secret}
      audience:
        - account
        - api://default
    cors:
      allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:9876, https://localhost:9876}
      allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
      allowed-headers: ${CORS_ALLOWED_HEADERS:Authorization,Content-Type,Accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers, X-Requested-With, X-Xsrf-Token, X-New-Header}
      exposed-headers: ${CORS_EXPOSED_HEADERS:Access-Control-Allow-Origin,Access-Control-Allow-Credentials}
      allow-credentials: ${CORS_ALLOW_CREDENTIALS:true}
      max-age: ${CORS_MAX_AGE:3600}
    domain: ${HOSTNAME:localhost}
