name: 'Docker Security Scan'
description: 'Scans Docker images for vulnerabilities using Trivy and uploads SARIF reports'

inputs:
  image-ref:
    description: 'Docker image reference to scan (e.g., ghcr.io/owner/repo/image:tag)'
    required: true
  report-name:
    description: 'Name for the security report file (without extension)'
    required: true
  category:
    description: 'SARIF category for GitHub Security tab (e.g., backend-trivy, frontend-trivy)'
    required: true
  severity:
    description: 'Comma-separated list of severities to scan for'
    required: false
    default: 'HIGH,CRITICAL'
  fail-on-error:
    description: 'Whether to fail the pipeline if scan fails'
    required: false
    default: 'false'

outputs:
  scan-result:
    description: 'Result of the security scan (success, failed, error)'
    value: ${{ steps.scan-status.outputs.result }}
  sarif-file:
    description: 'Path to the generated SARIF file'
    value: ${{ steps.scan-status.outputs.sarif-file }}

runs:
  using: "composite"
  steps:
    - name: Run Trivy vulnerability scanner
      id: trivy-scan
      uses: aquasecurity/trivy-action@b2933f565dbc598b29947660e66259e3c7bc8561 #0.20.0
      continue-on-error: true
      with:
        image-ref: ${{ inputs.image-ref }}
        format: 'template'
        template: '@/contrib/sarif.tpl'
        output: '${{ inputs.report-name }}.sarif'
        severity: ${{ inputs.severity }}

    - name: Log scan start
      shell: bash
      run: |
        echo "üîç Starting security scan for image: ${{ inputs.image-ref }}"
        echo "  Severity levels: ${{ inputs.severity }}"
        echo "  Report name: ${{ inputs.report-name }}.sarif"
        echo "  Category: ${{ inputs.category }}"

    - name: Set scan status
      id: scan-status
      shell: bash
      run: |
        # Create log directory for scan output
        mkdir -p /tmp/scan-logs
        SCAN_LOG="/tmp/scan-logs/${{ inputs.report-name }}.log"

        # Check if SARIF file exists and has content
        if [ -f "${{ inputs.report-name }}.sarif" ] && [ -s "${{ inputs.report-name }}.sarif" ]; then
          # Count vulnerabilities by severity
          VULN_COUNT=$(grep -c "\"level\": \"error\"" "${{ inputs.report-name }}.sarif" || echo "0")
          HIGH_COUNT=$(grep -c "\"HIGH\"" "${{ inputs.report-name }}.sarif" || echo "0")
          CRITICAL_COUNT=$(grep -c "\"CRITICAL\"" "${{ inputs.report-name }}.sarif" || echo "0")

          # Log vulnerability counts
          echo "üîç Vulnerability summary:" | tee -a $SCAN_LOG
          echo "  Total vulnerabilities: $VULN_COUNT" | tee -a $SCAN_LOG
          echo "  HIGH severity: $HIGH_COUNT" | tee -a $SCAN_LOG
          echo "  CRITICAL severity: $CRITICAL_COUNT" | tee -a $SCAN_LOG

          if [ "${{ steps.trivy-scan.outcome }}" = "success" ]; then
            echo "result=success" >> $GITHUB_OUTPUT
            echo "sarif-file=${{ inputs.report-name }}.sarif" >> $GITHUB_OUTPUT
            echo "‚úÖ Security scan completed successfully" | tee -a $SCAN_LOG

            if [ $VULN_COUNT -eq 0 ]; then
              echo "üéâ No vulnerabilities found matching severity criteria: ${{ inputs.severity }}" | tee -a $SCAN_LOG
            else
              echo "‚ö†Ô∏è Vulnerabilities found but below threshold or in allowed packages" | tee -a $SCAN_LOG
            fi
          elif [ "${{ steps.trivy-scan.outcome }}" = "failure" ]; then
            echo "result=failed" >> $GITHUB_OUTPUT
            echo "sarif-file=${{ inputs.report-name }}.sarif" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Security scan found vulnerabilities but continuing pipeline" | tee -a $SCAN_LOG
            echo "  Found $HIGH_COUNT HIGH and $CRITICAL_COUNT CRITICAL vulnerabilities" | tee -a $SCAN_LOG

            # Extract top 5 vulnerabilities for quick reference
            echo "üìã Top vulnerabilities (up to 5):" | tee -a $SCAN_LOG
            grep -A 2 "\"level\": \"error\"" "${{ inputs.report-name }}.sarif" | grep "\"text\"" | head -5 | sed 's/.*"text": "\(.*\)".*/  - \1/' | tee -a $SCAN_LOG
          else
            echo "result=error" >> $GITHUB_OUTPUT
            echo "sarif-file=${{ inputs.report-name }}.sarif" >> $GITHUB_OUTPUT
            echo "‚ùå Security scan encountered an error but produced output" | tee -a $SCAN_LOG
          fi
        else
          echo "result=error" >> $GITHUB_OUTPUT
          echo "sarif-file=" >> $GITHUB_OUTPUT
          echo "‚ùå Security scan encountered an error - no SARIF file produced" | tee -a $SCAN_LOG
          echo "üîç Common scan issues:" | tee -a $SCAN_LOG
          echo "  - Image not found in registry" | tee -a $SCAN_LOG
          echo "  - Authentication issues with registry" | tee -a $SCAN_LOG
          echo "  - Network connectivity problems" | tee -a $SCAN_LOG
          echo "  - Trivy configuration issues" | tee -a $SCAN_LOG
        fi

        # Store scan log path for artifact upload
        echo "scan-log=$SCAN_LOG" >> $GITHUB_OUTPUT

    - name: Upload Trivy scan results to GitHub Security tab
      if: always() && steps.scan-status.outputs.sarif-file != ''
      # Pinned to v3 commit hash for security
      uses: github/codeql-action/upload-sarif@7c651bd38dd1af6b6a3150197b37799cb367fb05 # v3
      continue-on-error: true
      with:
        sarif_file: ${{ steps.scan-status.outputs.sarif-file }}
        category: ${{ inputs.category }}

    - name: Upload scan results as artifact
      if: always() && (steps.scan-status.outputs.sarif-file != '' || steps.scan-status.outputs.scan-log != '')
      # Pinned to v4 commit hash for security
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      continue-on-error: true
      with:
        name: ${{ inputs.report-name }}-scan-results
        path: |
          ${{ steps.scan-status.outputs.sarif-file }}
          ${{ steps.scan-status.outputs.scan-log }}
        retention-days: 30

    - name: Handle scan failure
      if: inputs.fail-on-error == 'true' && steps.scan-status.outputs.result != 'success'
      shell: bash
      run: |
        echo "‚ùå Security scan failed and fail-on-error is enabled"
        exit 1

    - name: Log scan summary
      shell: bash
      run: |
        echo "üîç Security Scan Summary:"
        echo "  Image: ${{ inputs.image-ref }}"
        echo "  Category: ${{ inputs.category }}"
        echo "  Severity: ${{ inputs.severity }}"
        echo "  Result: ${{ steps.scan-status.outputs.result }}"

        # Check if SARIF file exists and has content
        if [ "${{ steps.scan-status.outputs.sarif-file }}" != "" ]; then
          echo "  SARIF Report: ${{ steps.scan-status.outputs.sarif-file }}"
          echo "  Report uploaded to GitHub Security tab"
          echo "  Artifact name: ${{ inputs.report-name }}-scan-results"

          # Count vulnerabilities by severity if SARIF file exists
          if [ -f "${{ steps.scan-status.outputs.sarif-file }}" ]; then
            VULN_COUNT=$(grep -c "\"level\": \"error\"" "${{ steps.scan-status.outputs.sarif-file }}" || echo "0")
            HIGH_COUNT=$(grep -c "\"HIGH\"" "${{ steps.scan-status.outputs.sarif-file }}" || echo "0")
            CRITICAL_COUNT=$(grep -c "\"CRITICAL\"" "${{ steps.scan-status.outputs.sarif-file }}" || echo "0")

            echo "  Vulnerability counts:"
            echo "    Total: $VULN_COUNT"
            echo "    HIGH: $HIGH_COUNT"
            echo "    CRITICAL: $CRITICAL_COUNT"
          fi
        else
          echo "  No SARIF report was generated"
          echo "  Artifact name: ${{ inputs.report-name }}-scan-results (contains logs only)"
        fi

        # Add more detailed information about the scan result
        if [ "${{ steps.scan-status.outputs.result }}" = "success" ]; then
          echo "‚úÖ No vulnerabilities found matching severity criteria: ${{ inputs.severity }}"
          echo "  Image is ready for deployment"
        elif [ "${{ steps.scan-status.outputs.result }}" = "failed" ]; then
          echo "‚ö†Ô∏è Vulnerabilities found but pipeline continues"
          echo "  Check GitHub Security tab for details"
          echo "  Artifact with scan results has been uploaded"
          echo "  Consider reviewing vulnerabilities before production deployment"

          # Provide remediation guidance
          echo "  Remediation options:"
          echo "    - Update base images to newer versions"
          echo "    - Apply security patches to dependencies"
          echo "    - Consider using distroless or minimal base images"
          echo "    - Add vulnerability exceptions for false positives"
        else
          echo "‚ö†Ô∏è Scan encountered an error but pipeline continues"
          echo "  Check the scan logs for more details"
          echo "  Common scan errors:"
          echo "    - Image not found in registry"
          echo "    - Authentication issues with registry"
          echo "    - Network connectivity problems"
          echo "    - Trivy configuration issues"
        fi

        # Add scan performance metrics
        echo "‚è±Ô∏è Scan performance:"
        SCAN_DURATION=${{ steps.trivy-scan.outputs.time || 'N/A' }}
        if [ "$SCAN_DURATION" != "N/A" ]; then
          echo "  Scan duration: $SCAN_DURATION"
        else
          echo "  Scan duration: information unavailable"
        fi
