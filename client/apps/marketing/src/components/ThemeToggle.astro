---
import type { HTMLAttributes } from "astro/types";
import { Icon } from "astro-icon/components";
import { type Lang, useTranslations } from "@/i18n";
import { cn } from "@/lib/utils";
import IconButton from "./IconButton.astro";

export interface Props extends HTMLAttributes<"button"> {}
const t = useTranslations(Astro.currentLocale as Lang);
const { id = "theme-toggle", class: className, ...attrs } = Astro.props;
---

<theme-toggle data-id={id} data-label={t("theme.toggle.button")} data-tooltip={t("theme.toggle.tooltip")}>
  <IconButton
  id={id}
  class={cn(className)}
    aria-label={t("theme.toggle.button")}
    title={t("theme.toggle.tooltip")}
    {...attrs}
  >
    <Icon name="tabler:sun" class="size-5 block dark:hidden text-gray-800 dark:text-white cursor-pointer" />
    <Icon name="tabler:moon" class="size-5 hidden dark:block text-gray-800 dark:text-white cursor-pointer" />
  </IconButton>
</theme-toggle>

<script>
type ColorScheme = 'dark' | 'light';

  class ThemeToggle extends HTMLElement {
    constructor() {
      super();
    }

    connectedCallback() {
      // Get button inside component
      const button = this.querySelector('button');

      // Apply ID from data attribute
      if (this.dataset.id && button) {
        button.id = this.dataset.id;
      }

      // Set up initial theme
      const theme = this.getTheme();
      this.applyTheme(theme);

      // Add event listener to toggle theme
      button?.addEventListener('click', () => {
        const currentTheme = this.getTheme();
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        this.applyTheme(newTheme);
      });
    }

    // Get the current theme
    getTheme(): ColorScheme {
      if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
        const theme = localStorage.getItem('theme');
        if (theme === 'dark' || theme === 'light') {
          return theme;
        }
      }
      return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    }

    // Apply the theme
    applyTheme(theme: ColorScheme) {
      const rootEl = document.documentElement;

      if (theme === 'dark') {
        rootEl.classList.add('dark');
      } else {
        rootEl.classList.remove('dark');
      }

      localStorage.setItem('theme', theme);
    }
  }

  customElements.define('theme-toggle', ThemeToggle);
</script>
