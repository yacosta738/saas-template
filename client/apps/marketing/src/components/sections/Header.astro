---
import type { HTMLAttributes } from "astro/types";
import Logo from "@/components/Brand.astro";
import ThemeToggle from "@/components/ThemeToggle.astro";
import { BASE_URL } from "@/consts";
import { type Lang, useTranslations } from "@/i18n";
import LocaleSelect from "@/i18n/components/LocaleSelect.astro";
import { cn } from "@/lib/utils";
import { headerMenuItems } from "@/models/menu";
import MobileMenuButton from "../MobileMenuButton.vue";
import NavMenus from "../NavMenus.vue";
import { buttonVariants } from "../ui/button";

const lang = Astro.currentLocale as Lang;
const t = useTranslations(lang);

interface Props extends HTMLAttributes<"header"> {}
const { ...attrs } = Astro.props as Props;
const currentPath = Astro.url.pathname;
---

<header
  id="header"
  class={cn(
    "fixed top-0 left-0 w-full z-50 bg-transparent border-b border-b-slate-300 dark:border-b-slate-700",
    "transition-all duration-[400ms] ease-in-out [transition-property:top,background-color,border-bottom-color]",
  )}
  {...attrs}
>
  <div class="container mx-auto px-4 flex items-center h-20 relative">
    <div class="flex items-center mr-10">
      <Logo />
    </div>

    <div class="hidden lg:flex items-center justify-center">
      <NavMenus
        client:only="vue"
        menuItems={headerMenuItems}
        lang={lang}
        currentPath={currentPath}
      />
    </div>

    <div class="flex items-center justify-center space-x-4 ml-auto">
      <ThemeToggle />
      <LocaleSelect variant="text" class="hidden md:inline-flex" />
      <a href={BASE_URL} class={cn(buttonVariants({ variant: "default" }), "hidden md:inline-flex")}>
        {t("header.cta")}
      </a>
      <div class="lg:hidden">
        <MobileMenuButton
          client:only="vue"
          menuItems={headerMenuItems}
          lang={lang}
          currentPath={currentPath}
        />
      </div>
    </div>
  </div>
</header>

<style>
  @reference "@/styles/global.css";

  /* Header states */
  header {
    background-color: transparent;
    transform: translateY(0);
  }

  header.scrolled {
    @apply border-b border-b-slate-300/60 dark:border-b-slate-700/60 bg-white dark:bg-gray-900;
  }

  /* Alternative approach using CSS variables */
  header.scrolled #site-title,
  header.scrolled nav a,
  header.scrolled button:not(.bg-white):not(.bg-gray-900) {
    color: var(--colors-main-light);
  }

  :global(.dark) header.scrolled #site-title,
  :global(.dark) header.scrolled nav a,
  :global(.dark) header.scrolled button:not(.bg-white):not(.bg-gray-900) {
    color: var(--colors-main-dark);
  }

  header.scrolled nav a:hover {
    @apply text-gray-500 dark:text-gray-400;
  }

  header.hide {
    transform: translateY(-100%);
  }
</style>

<script>
  // Handle colored-hero classes for button styling
  const header = document.getElementById("header");
  const heroSection = document.querySelector(".hero-section");

  // Check if we're on a page with a colored hero
  if (heroSection && heroSection.classList.contains("colored-hero")) {
    document.body.classList.add("colored-hero");
  }

  // Header scroll behavior (throttled)
  let lastScrollY = 0;
  let ticking = false;

  const handleHeaderVisibility = () => {
    if (!header) return;
    const y = window.scrollY;
    if (y <= 50) {
      // Reset when at or above 50px from top
      header.classList.remove("hide", "scrolled");
    } else if (y < lastScrollY) {
      // Scrolling up past 50px
      header.classList.remove("hide");
      header.classList.add("scrolled");
    } else {
      // Scrolling down past 50px
      header.classList.add("hide");
    }
    lastScrollY = y;
  };

  // Throttle scroll handler to one per animation frame
  const onScroll = () => {
    if (!ticking) {
      ticking = true;
      requestAnimationFrame(() => {
        handleHeaderVisibility();
        ticking = false;
      });
    }
  };

  // Initialize header state
  handleHeaderVisibility();
  window.addEventListener("scroll", onScroll, { passive: true });
</script>
