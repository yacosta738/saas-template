---
export const prerender = true;

import AuthorProfileCard from "@/components/AuthorProfileCard.astro";
import PageHeadline from "@/components/PageHeadline.astro";
import Pagination from "@/components/Pagination.astro";
import { type Lang, LOCALES, useTranslations } from "@/i18n";
import Layout from "@/layouts/General.astro";
import { countArticlesByAuthor, getAuthors } from "@/models/author";

export async function getStaticPaths() {
	const allAuthors = await getAuthors();

	const paths = [];

	for (const lang of Object.keys(LOCALES)) {
		const langAuthors = allAuthors.filter((a) => a.id.split("/")[0] === lang);

		const postsPerPage = 16;
		const totalPages = Math.ceil(langAuthors.length / postsPerPage) || 1;

		// Only generate pages starting from page 2 (page 1 is handled by index.astro)
		for (let i = 2; i <= totalPages; i++) {
			const pageAuthors = langAuthors.slice(
				(i - 1) * postsPerPage,
				i * postsPerPage,
			);
			if (pageAuthors.length === 0) continue;

			paths.push({
				params: {
					lang,
					page: i.toString(),
				},
				props: {
					page: {
						data: pageAuthors,
						currentPage: i,
						lastPage: totalPages,
					},
				},
			});
		}
	}

	return paths;
}

// Get current locale from params for rendering
const { lang } = Astro.params;
const currentLocale = lang as Lang;
const t = useTranslations(currentLocale);

const title = t("authors.title");
const subtitle = t("authors.subtitle");
const description = t("authors.description");

const basePath = `/${currentLocale}/authors/page`;
const indexUrl = `/${currentLocale}/authors`;
const { page } = Astro.props;

// fetch article counts for authors on this page in parallel
const counts = await Promise.all(
	(page?.data ?? []).map((a) => countArticlesByAuthor(a.id, currentLocale)),
);
---

<Layout title={title} description={description}>
	<PageHeadline
		title={title}
		subtitle={subtitle}
		placeholder={t("authors.searchPlaceholder")}
		clearLabel={t("authors.clearLabel")}
	>
		<p class="text-xl text-gray-900 dark:text-white">{description}</p>
	</PageHeadline>

	<section class="container mx-auto px-4 py-12">
		{(page?.data?.length ?? 0) > 0 ? (
			<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
				{page.data.map((author, idx) => (
					<AuthorProfileCard
						author={author}
						articlesCount={counts[idx] ?? 0}

					/>
				))}
			</div>
		) : (
			<div class="text-center py-16">
				<svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
				</svg>
				<h3 class="mt-2 text-sm font-medium text-gray-900 dark:text-white">{t("authors.noAuthorsFound")}</h3>
			</div>
		)}

		{(page?.lastPage ?? 1) > 1 && (
			<div class="mt-8">
				<Pagination
					currentPage={page.currentPage}
					lastPage={page.lastPage}
					urlPrev={page.currentPage > 2 ? `${basePath}/${page.currentPage - 1}` : indexUrl}
					urlNext={page.currentPage < page.lastPage ? `${basePath}/${page.currentPage + 1}` : null}
					basePath={basePath}
					maxDisplayedPages={5}
					firstPageUrl={indexUrl}
				/>
			</div>
		)}
	</section>
</Layout>
