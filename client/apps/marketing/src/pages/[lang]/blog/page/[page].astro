---
export const prerender = true;

import GridContainer from "@/components/GridContainer.astro";
import PageHeadline from "@/components/PageHeadline.astro";
import Pagination from "@/components/Pagination.astro";
import { type Lang, LOCALES, useTranslations } from "@/i18n";
import Layout from "@/layouts/General.astro";
import { getArticles } from "@/models/article";

export async function getStaticPaths() {
	const allArticles = await getArticles();

	// Create paths for each language
	const paths = [];

	// Generate paths for all supported languages
	for (const lang of Object.keys(LOCALES)) {
		// Filter articles for this language
		const langArticles = allArticles
			.filter((post) => post.id.split("/")[0] === lang)
			.sort((a, b) => new Date(b.date).valueOf() - new Date(a.date).valueOf());

		// Define pagination config
		const postsPerPage = 15;
		const totalPages = Math.ceil(langArticles.length / postsPerPage);

		// Only generate pages starting from page 2 (page 1 is handled by index.astro)
		for (let i = 2; i <= totalPages; i++) {
			const pagePosts = langArticles.slice(
				(i - 1) * postsPerPage,
				i * postsPerPage,
			);

			// Skip if no posts for this page
			if (pagePosts.length === 0) continue;

			paths.push({
				params: {
					lang,
					page: i.toString(),
				},
				props: {
					page: {
						data: pagePosts,
						currentPage: i,
						lastPage: totalPages,
					},
				},
			});
		}
	}

	return paths;
}

// Get current locale from params for rendering
const { lang } = Astro.params;
const currentLocale = lang as Lang;
const t = useTranslations(currentLocale);

const title = t("blog.header.title");
const subtitle = t("blog.header.subtitle");

const basePath = `/${currentLocale}/blog/page`;
const indexUrl = `/${currentLocale}/blog`;
const { page } = Astro.props;
---

<Layout title={title}>
	<div class="container mx-auto px-4 pt-24">
		<PageHeadline title={title} subtitle={subtitle} placeholder={t('blog.search.placeholder')} clearLabel={t('blog.search.clear')}>
    <p class="text-xl text-gray-900 dark:text-white">
      {
        t({
          en: "Stay updated with the latest insights and developments",
          es: "Mantente actualizado con las Ãºltimas novedades y desarrollos",
        })
      }
    </p>
  </PageHeadline>
		<GridContainer posts={page.data} />

		<Pagination
			currentPage={page.currentPage}
			lastPage={page.lastPage}
			urlPrev={page.currentPage > 2 ? `${basePath}/${page.currentPage - 1}` : indexUrl}
			urlNext={page.currentPage < page.lastPage ? `${basePath}/${page.currentPage + 1}` : null}
			basePath={basePath}
			maxDisplayedPages={5}
			firstPageUrl={indexUrl}
		/>
	</div>
</Layout>
